{"version":3,"sources":["components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ContactList","contacts","onDeleteContact","className","map","id","name","number","onClick","ContactForm","props","useState","setName","setNumber","handleChange","event","currentTarget","value","resetState","onSubmit","e","preventDefault","type","pattern","title","required","onChange","Filter","App","filter","setFilter","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","console","log","useLocalStorege","setContacts","filterContacts","normalizedFilter","toLowerCase","contact","includes","getFilterContacts","find","toLocaleLowerCase","alert","addContacts","shortid","generate","preState","target","contactId","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a0f3848.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactList.scss';\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul className=\"ContactList\">\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <li key={id}>\n            {name}:<span> {number}</span>\n            <button onClick={() => onDeleteContact(id)}>delete</button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\nexport default ContactList;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactForm.scss';\nconst ContactForm = props => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'number':\n        setNumber(value);\n        break;\n      case 'name':\n        setName(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    props.onSubmit({ name, number });\n    resetState();\n  };\n  const resetState = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"ContactForm\">\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Telephone\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport './Filter.scss';\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label className=\"Filter\">\n      Find contacts by name\n      <input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\n    </label>\n  );\n};\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import { useState, useEffect } from 'react';\nimport shortid from 'shortid';\nimport './App.scss';\nimport ContactList from './components/ContactList';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\n\nconst useLocalStorege = (key, defaultValue) => {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n    console.log('Change');\n  }, [state, key]);\n\n  return [state, setState];\n};\n\nconst App = () => {\n  const [filter, setFilter] = useState('');\n  const [contacts, setContacts] = useLocalStorege('contacts', [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n\n  const deleteContact = contactId => {\n    setContacts(prevState =>\n      prevState.filter(contact => contact.id !== contactId),\n    );\n  };\n  const formSubmitHandler = ({ name, number }) => {\n    const sameName = contacts.find(\n      contact => contact.name.toLocaleLowerCase() === name.toLocaleLowerCase(),\n    );\n    if (sameName) {\n      alert(`${contacts.name} is already in contacts.`);\n    } else {\n      const addContacts = {\n        id: shortid.generate(),\n        name: name,\n        number: number,\n      };\n      setContacts(preState => [addContacts, ...preState]);\n    }\n  };\n\n  const changeFilter = e => {\n    setFilter(e.target.value);\n  };\n  const getFilterContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n  const filterContacts = getFilterContacts();\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={formSubmitHandler} />\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={changeFilter} />\n      <ContactList contacts={filterContacts} onDeleteContact={deleteContact} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}